fuzzing_on=0
while getopts "D:x" OPTION; do
    case $OPTION in
    D)
        export DOMAIN=$OPTARG
        ;;
    x)
        fuzzing_on=1
        ;;
    *)
        echo "Usage: ./crimson_recon -D example.domain.com"
        exit 1
        ;;
    esac
done

### CREATING PROPER DIRECTORY
mkdir $HOME/bounty/$DOMAIN -p
cd $HOME/bounty/$DOMAIN

while : do
### DOWNLOADING UP TO DATE LIST WITH RESOLVERS
echo -e "\033[0;31m [+]\033[0m DOWNLOADING FRESH RESOLVERS"
wget https://raw.githubusercontent.com/BonJarber/fresh-resolvers/main/resolvers.txt -O resolvers.txt > /dev/null 2>&1

### STARTING PASSIVE ENUMERATION = subdomains.txt
echo -e "\033[0;31m [+]\033[0m SUBDOMAINS SCRAPING"
# crt.txt
curl -s https://crt.sh/?q=$DOMAIN | grep $DOMAIN | grep TD | sed 's/<BR>.*$//g' | sed 's/<\/TD>.*$//' | sed 's/<TD>//g' | sed 's/\*.//g' | sed 's/ //g' | grep -v "TDclass" | sort -u > crt.txt
cat crt.txt | anew subdomains.txt > /dev/null
rm crt.txt
# amass.txt
amass enum --passive -d $DOMAIN -o amass.txt -rf resolvers.txt > /dev/null
cat amass.txt | anew subdomains.txt > /dev/null
rm amass.txt
# subfinder.txt
subfinder -silent -recursive -d $DOMAIN -o subfinder.txt > /dev/null
cat subfinder.txt | anew subdomains.txt > /dev/null
rm subfinder.txt
# sudomy.txt
cd $HOME/tools/Sudomy; ./sudomy -d $DOMAIN --no-probe -o $DOMAIN > /dev/null
cd $HOME/bounty/$DOMAIN
cat $HOME/tools/Sudomy/$DOMAIN/Sudomy-Output/$DOMAIN/subdomain.txt | anew subdomains.txt
rm -rf $HOME/tools/Sudomy/$DOMAIN/Sudomy-Output/$DOMAIN
# assetfinder.txt
assetfinder --subs-only $DOMAIN >> assetfinder.txt
cat assetfinder.txt | anew subdomains.txt > /dev/null
rm assetfinder.txt
# paramspider.txt subdomains_paramspider.txt
python3 $HOME/tools/ParamSpider/paramspider.py -d $DOMAIN --output ./paramspider.txt --level high > /dev/null
cat paramspider.txt | unfurl -u domains | anew subdomains.txt > /dev/null

### 1ST BRUTEFORCE ON -x
if [ $fuzzing_on == 1 ]
then
        ### STARTING 1ST BRUTEFORCE => subdomains.txt
        echo -e "\033[0;31m [+]\033[0m SUBDOMAINS BRUTEFORCING"
        puredns bruteforce $HOME/tools/CRIMSON/words/dns $DOMAIN -w puredns1.txt -r resolvers.txt -l 250
        cat puredns1.txt | anew subdomains.txt
        rm puredns1.txt
fi

### CHECKING FOR LIVE DOMAINS = live1.txt
echo -e "\033[0;31m [+]\033[0m CHECKING FOR LIVE SUBDOMAINS"
echo -e "\033[0;31m==================================\033[0m"
cat subdomains.txt | dnsx -t 100 -silent -r resolvers.txt -o live1.txt
echo -e "\033[0;31m==================================\033[0m"
### 2ND BRUTEFORCE ON -x
if [ $fuzzing_on == 1 ]
then
        ### MAKING MUTATIONS FROM ENUMERATED SUBDOMAINS (EXCLUDE ALL SUBDOMAINS ENUMERATED TILL NOW) = altnds.txt
        echo -e "\033[0;31m [+]\033[0m MUTATING LIVE SUBDOMAINS"
        altdns -w $HOME/tools/CRIMSON/words/dns-altdns.txt -i live1.txt -o altdns_temp.txt
        cat $HOME/tools/CRIMSON/words/dns | sed "s/$/\.$domain/" > ddns.txt
        awk 'FNR==NR {a[$0]++; next} !($0 in a)' ddns.txt altdns_temp.txt > not_duplicated_altdns
        awk 'FNR==NR {a[$0]++; next} !($0 in a)' subdomains.txt not_duplicated_altdns > not_duplicated_altdns2
        awk 'FNR==NR {a[$0]++; next} !($0 in a)' live1.txt not_duplicated_altdns2 > altdns_with_domain_name
        cat altdns_with_domain_name | sed "s/\.$DOMAIN//g" > altdns.txt

        ### STARTING 2ND BRUTEFORCE WITH MUTATED WORDLIST = puredns2.txt
        echo -e "\033[0;31m [+]\033[0m CHECKING MUTATED LIST FOR LIVE SUBDOMAINS"
        $HOME/tools/puredns/puredns bruteforce altdns.txt $DOMAIN -w puredns2.txt -r resolvers.txt -l 250 
### CHECKING LIVE DOMAINS FROM BRUTEFORCE OF MUTATED WORDLIST = live2.txt
        cat puredns2.txt | dnsx -t 100 -silent -r resolvers.txt -o live2.txt > /dev/null

        ### MERGING live1.txt AND live2.txt = live.txt
        sort -u live1.txt  > live.txt
        sort -u live2.txt | anew live.txt

        ### CLEARING LOGS 
        rm live1.txt 
        rm live2.txt 
        rm altdns_temp.txt 
        rm not_duplicated_altnds 
        rm not_duplicated_altnds2 
        rm ddns.txt 
        rm altdns_with_domain_name 
        rm altdns.txt 
        rm puredns2.txt
else
        sort -u live1.txt  > live.txt
        rm live1.txt
fi


### SCRAPING THE INTERNET FOR URLS = gau.txt
echo -e "\033[0;31m [+]\033[0m GATHERING URLS"
cat live.txt | get-all-urls -subs >> gau.txt
cat gau.txt | unfurl -u domains > subs_gau.txt
sort -u subs_gau.txt live.txt > live2.txt
mv live2.txt live.txt
rm subs_gau.txt

### SCRAPING THE INTERNET FOR URLS = waybackurls.txt
cat live.txt | waybackurls >> waybackurls.txt
cat waybackurls.txt | unfurl -u domains > subs_waybackurls.txt
sort -u subs_waybackurls.txt live.txt > live2.txt
mv live2.txt live.txt
cat live.txt | anew subdomains.txt| telegram-send --stdin
rm subs_waybackurls.txt
### CHECK FOR LIVE LINKS (to proxy only valid urls) > urls.txt
echo -e "\033[0;31m [+]\033[0m CHECKING FOR LIVE URLS"
cat urls.txt | httpx -threads 50 -silent -o httpx_urls.txt > /dev/null
mv httpx_urls.txt urls.txt

### LOOKING FOR SUBDOMAINS AND SECRETS IN URLS = subdomainizer.txt
#echo -e "\033[0;31m [+]\033[0m GATHERING SUBDOMAINS, API KEYS, URLS [SUBDOMAINIZER]"
#python3 $HOME/tools/SubDomainizer/SubDomainizer.py -k -l urls.txt -o subdomainizer.txt > /dev/null

### GETTING SUBDOMAINS FROM subdomainizer.txt AND CHECKING FOR LIVE = live.txt
#cat subdomainizer.txt | grep $DOMAIN | dnsx -t 100 -silent -r resolvers.txt -o live3.txt
#cat live3.txt | anew live.txt > /dev/null
#rm live3.txt
### CHECKING STATUS CODE OF ALL DOMAINS = status_live.txt
echo -e "\033[0;31m [+]\033[0m CHECKING STATUS CODE OF ENUMERATED LIVE SUBDOMAINS"
cat live.txt | sed "s/^/http:\/\//" >> temp_live.txt
cat live.txt | sed "s/^/https:\/\//" >> temp_live.txt
wfuzz -f status_live.txt,raw -Z -z file,temp_live.txt -z file,$HOME/tools/CRIMSON/words/blank FUZZFUZ2Z > /dev/null 2>&1
rm temp_live.txt

### PROXING DOMAINS TO BURP = proxy.txt
#echo -e "\033[0;31m [+]\033[0m PROXING SUBDOMAINS TO BURP"
#cat status_live.txt | grep -v "XXX" | cut -d "\"" -f 2 > proxy.txt
#wfuzz -L -Z -z file,proxy.txt -z file,$HOME/tools/CRIMSON/words/blank -p 127.0.0.1:8080 FUZZFUZ2Z > /dev/null 2>&1

### CHECKING ZONE TRANSFER = dnsrecon.txt
echo -e "\033[0;31m [+]\033[0m CHECKING ZONE TRANSFER"
dnsrecon -d $DOMAIN -a >> dnsrecon.txt

### DNSSEC RECON = ldns-walk.txt
echo -e "\033[0;31m [+]\033[0m CHECKING DNSSEC MISONFIGURATIONS"
ldns-walk $DOMAIN >> ldns-walk.txt

### CHECKING FOR CORS MISSCONFIGURATION = cors_scan.txt
echo -e "\033[0;31m [+]\033[0m CHECKING CORS"
cat live.txt | CorsMe -t 50 -output cors_scan.txt > /dev/null

### CHECKING SUBDOMAIN TAKEOVER = subjack.txt
echo -e "\033[0;31m [+]\033[0m CHECKING DOMAIN TAKEOVER"
subjack -w live.txt -t 20 -timeout 30 -o subjack1.txt -ssl -a
cat subjack1.txt > subjack.txt 2>/dev/null
rm subjack1.txt 2>/dev/null
subjack -w live.txt -t 20 -timeout 30 -o subjack2.txt -a
cat subjack2.txt >> subjack.txt 2>/dev/null
rm subjack2.txt 2>/dev/null
### --- 3RDLEVEL SECTION --- ###
### THRID LEVEL SUBDOMAINS BRUTE-FORCE = 3rdlevel_live.txt
echo -e "\033[0;31m [+]\033[0m STARTING 3RDLEVEL ENUMERATION"
mkdir 3rdlevel
for subdomain in $(cat live.txt); do puredns bruteforce $HOME/tools/CRIMSON/words/dns $subdomain -w 3rdlevel/$subdomain.txt -r resolvers.txt -l 250 ;done
sort -u 3rdlevel/* > 3rdlevel.txt
cat 3rdlevel.txt | dnsx -o 3rdlevel_probe.txt | anew 3rdlevel_live.txt | telegram-send --stdin
rm -rf 3rdlevel/ 3rdlevel.txt
rm 3rdlevel_probe.txt

### CLEARING THE DIRECTORY
rm proxy.txt 2>/dev/null
rm resolvers.txt 2>/dev/null 
rm error_requests.txt 2>/dev/null
for f in $(ls); do [ -s $f ] || rm $f 
telegram-send "recon on $DOMAIN is finished"
;done
